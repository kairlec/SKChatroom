<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.skstudio.dao.FriendMapper">

    <update id="initialize">
        CREATE TABLE IF NOT EXISTS friend(user_id BIGINT NOT NULL,FOREIGN KEY(user_group_id) REFERENCES user(user_id),friend_id BIGINT NOT NULL,FOREIGN KEY(user_group_id) REFERENCES user(user_id),user_group_id BIGINT NOT NULL, FOREIGN KEY(user_group_id) REFERENCES friend_group(group_id),friend_group_id BIGINT NOT NULL, FOREIGN KEY(friend_group_id) REFERENCES friend_group(group_id))
    </update>

    <select id="getFriendList" resultType="cn.skstudio.pojo.Friend">
        SELECT friend_id AS user_id, user_group_id AS user_group_id
        FROM friend
        WHERE user_id = #{userID}
        UNION ALL
        SELECT user_id AS user_id, friend_group_id AS user_group_id
        FROM friend
        WHERE friend_id = #{userID};
    </select>

    <insert id="addFriend">
        INSERT INTO friend(user_id,friend_id,user_group_id,friend_group_id)
        VALUES(#{userID},#{friendID},#{userGroupID},#{friendGroupID})
    </insert>

    <update id="moveFriend">
        UPDATE friend
        <set>
            user_group_id = #{GroupID}
        </set>
        WHERE user_id = #{userID} AND friend_id = #{friendID};
        UPDATE friend
        <set>
            friend_group_id = #{GroupID}
        </set>
        WHERE friend_id = #{userID} AND user_id = #{friendID};
    </update>

    <delete id="deleteFriend">
        DELETE FROM friend
        WHERE (user_id = #{userID} AND friend_id = #{friendID}) OR (friend_id = #{userID} AND user_id = #{friendID})
    </delete>
</mapper>